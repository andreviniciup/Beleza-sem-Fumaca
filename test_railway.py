#!/usr/bin/env python3
"""
Script para testar configura√ß√£o Railway localmente
"""

import os
from app import app, db, Questao

def test_railway_config():
    """Testa a configura√ß√£o do Railway"""
    
    print("üîç Testando configura√ß√£o Railway...")
    
    with app.app_context():
        try:
            # Verificar configura√ß√£o do banco
            db_uri = app.config['SQLALCHEMY_DATABASE_URI']
            print(f"üìä URI do banco: {db_uri}")
            
            # Testar conex√£o
            db.engine.execute('SELECT 1')
            print("‚úÖ Conex√£o com banco estabelecida!")
            
            # Verificar se as tabelas existem
            tables = db.engine.table_names()
            print(f"üìã Tabelas encontradas: {tables}")
            
            # Verificar quest√µes
            questao_count = Questao.query.count()
            print(f"üìù Quest√µes no banco: {questao_count}")
            
            if questao_count == 0:
                print("‚ö†Ô∏è Nenhuma quest√£o encontrada!")
                print("üí° Execute: python insert_questions.py")
            else:
                print("‚úÖ Quest√µes carregadas com sucesso!")
                
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o: {str(e)}")
            print("\nüîß Poss√≠veis solu√ß√µes:")
            print("1. Verifique se DATABASE_URL est√° configurada")
            print("2. Verifique se o banco PostgreSQL est√° ativo")
            print("3. Verifique se as credenciais est√£o corretas")

def test_environment():
    """Testa as vari√°veis de ambiente"""
    
    print("\nüîß Verificando vari√°veis de ambiente...")
    
    # Verificar DATABASE_URL
    database_url = os.environ.get('DATABASE_URL')
    if database_url:
        print(f"‚úÖ DATABASE_URL: {database_url[:50]}...")
    else:
        print("‚ö†Ô∏è DATABASE_URL n√£o encontrada")
    
    # Verificar SECRET_KEY
    secret_key = os.environ.get('SECRET_KEY')
    if secret_key:
        print(f"‚úÖ SECRET_KEY: {secret_key[:20]}...")
    else:
        print("‚ö†Ô∏è SECRET_KEY n√£o encontrada")
    
    # Verificar FLASK_ENV
    flask_env = os.environ.get('FLASK_ENV')
    if flask_env:
        print(f"‚úÖ FLASK_ENV: {flask_env}")
    else:
        print("‚ö†Ô∏è FLASK_ENV n√£o encontrada")

if __name__ == "__main__":
    test_environment()
    test_railway_config()
